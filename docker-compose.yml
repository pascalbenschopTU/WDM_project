version: "3"
services:
  rabbitmq:
    image: rabbitmq:3.11
    restart: always
    hostname: rabbitmqhost
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"

  gateway:
    image: nginx:latest
    volumes:
      - ./gateway_nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8000:80"
    depends_on:
      - order-service
      - stock-service
      - payment-service

  order-service:
    build: ./order
    image: order:latest
    command: gunicorn -b 0.0.0.0:5000 app:app -w 1 --reload --timeout 10
    env_file:
      - env/order_mongodb.env
    environment:
      - GATEWAY_URL=http://gateway:80
    depends_on:
      rabbitmq:
        condition: service_healthy
      order-mongodb:
        condition: service_started

  order-mongodb:
    image: mongo:latest
    restart: unless-stopped
    container_name: order-mongodb
    command: mongod --auth
    ports:
      - 27018:27018
    volumes:
      - order_mongodb_data:/data/db
      - ./order/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    env_file:
      - env/order_mongodb_init.env

  stock-service:
    build: ./stock
    image: stock:latest
    command: gunicorn -b 0.0.0.0:5000 app:app -w 1 --reload --timeout 10
    environment:
      - GATEWAY_URL=http://gateway:80
    depends_on:
      rabbitmq:
        condition: service_healthy
  
  stock-consumer:
    build: ./rabbitmq/consumers/stock
    image: stock-consumer:latest
    command: python consumer.py
    restart: always
    env_file:
      - env/stock_redis.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis-node-0:
        condition: service_healthy
      redis-node-1:
        condition: service_healthy
      redis-node-2:
        condition: service_healthy
      redis-node-3:
        condition: service_healthy
      redis-node-4:
        condition: service_healthy
      redis-node-5:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 5

  payment-service:
    build: ./payment
    image: payment:latest
    command: gunicorn -b 0.0.0.0:5000 app:app -w 1 --timeout 10
    env_file:
      - env/payment_mongodb.env
    environment:
      - GATEWAY_URL=http://gateway:80
    depends_on:
      payment-mongodb:
        condition: service_started

  payment-mongodb:
    image: mongo:latest
    restart: unless-stopped
    container_name: payment-mongodb
    command: mongod --auth
    ports:
      - 27017:27017
    volumes:
      - payment_mongodb_data:/data/db
      - ./payment/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    env_file:
      - env/payment_mongodb_init.env


  payment-consumer:
    build: ./rabbitmq/consumers/payment
    image: payment-consumer:latest
    command: python consumer.py
    env_file:
      - env/payment_mongodb.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./rabbitmq/consumers/payment:/HOME/FLASK-APP
  
  redis-node-0:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-0:/bitnami/redis/data
    environment:
      # - 'REDIS_PASSWORD=bitnami'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
      - 'ALLOW_EMPTY_PASSWORD=yes'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  redis-node-1:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-1:/bitnami/redis/data
    environment:
      # - 'REDIS_PASSWORD=bitnami'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
      - 'ALLOW_EMPTY_PASSWORD=yes'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  redis-node-2:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-2:/bitnami/redis/data
    environment:
      # - 'REDIS_PASSWORD=bitnami'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
      - 'ALLOW_EMPTY_PASSWORD=yes'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  redis-node-3:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-3:/bitnami/redis/data
    environment:
      # - 'REDIS_PASSWORD=bitnami'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
      - 'ALLOW_EMPTY_PASSWORD=yes'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  redis-node-4:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-4:/bitnami/redis/data
    environment:
      # - 'REDIS_PASSWORD=bitnami'
      - 'ALLOW_EMPTY_PASSWORD=yes'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  redis-node-5:
    image: docker.io/bitnami/redis-cluster:7.0
    volumes:
      - redis-cluster_data-5:/bitnami/redis/data
    # ports:
    #   - "6379:6379"
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
    environment:
      # - 'REDIS_PASSWORD=bitnami'
      # - 'REDISCLI_AUTH=bitnami'
      - 'ALLOW_EMPTY_PASSWORD=yes'
      - 'REDIS_CLUSTER_REPLICAS=1'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5'
      - 'REDIS_CLUSTER_CREATOR=yes'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

volumes:
  order_mongodb_data:
    driver: local
  payment_mongodb_data:
    driver: local
  stock_postgres_data:
    driver: local
  redis-cluster_data-0:
    driver: local
  redis-cluster_data-1:
    driver: local
  redis-cluster_data-2:
    driver: local
  redis-cluster_data-3:
    driver: local
  redis-cluster_data-4:
    driver: local
  redis-cluster_data-5:
    driver: local
